// Generated by CoffeeScript 1.9.1
(function() {
  var Atop, Promise, _, crypto, debug, error, fetch, handles, log, qs;

  Promise = require("bluebird");

  crypto = require('crypto');

  qs = require('querystring');

  fetch = require('node-fetch');

  _ = require('lodash');

  debug = require('debug');

  log = debug('atop:debug');

  log.log = console.log.bind(console);

  error = debug('atop:error');

  handles = require('./handles');

  Atop = (function() {
    var HEADERS, request;

    function Atop(options) {
      this.conf = options.conf || {};
      this.atopAPIDict = options.atopAPIDict || {};
    }

    HEADERS = {
      'User-Agent': 'Airtake/node',
      'Content-Type': 'application/x-www-form-urlencoded'
    };

    Atop.prototype.__encodeNothing = function(str) {
      return str;
    };

    Atop.prototype.__getNowTimestramp = function() {
      return String(Date.now()).slice(0, -3);
    };

    Atop.prototype.processData = function(methodName, data, lang) {
      var body, method, params, sign, signOrderKeys, signStr;
      if (lang == null) {
        lang = 'zh_CN';
      }
      log(this.atopAPIDict, 'dfsfd', lang);
      method = this.atopAPIDict.methods[methodName];
      if (!method) {
        console.error('找不到 atop 方法', methodName);
      }
      params = _.extend(_.omit(this.atopAPIDict, 'methods', 'withSid', 'withoutSid'), {
        a: method.name,
        v: method.v,
        time: this.__getNowTimestramp(),
        appSecret: this.conf.appkey,
        postData: JSON.stringify(data.postData || {}),
        lang: lang
      });
      log(params, 'params');
      method.sid && (params.sid = data.sid);
      signOrderKeys = method.sid ? this.atopAPIDict.withSid : this.atopAPIDict.withoutSid;
      signStr = signOrderKeys.map(function(name) {
        return [name, params[name]].join('=');
      }).join('||');
      sign = crypto.createHash('md5').update(signStr, 'utf8').digest('hex');
      delete params.appSecret;
      params.sign = sign;
      body = qs.stringify(params);
      log(signStr);
      log(params);
      log(body);
      return body;
    };

    request = function(url, options) {
      if (options == null) {
        options = {};
      }
      log(url, options);
      return fetch(url, options).then(handles.status).then(handles.json);
    };

    Atop.prototype.atopRequest = function(name, data, lang) {
      var options, url;
      if (data == null) {
        data = {};
      }
      url = this.conf.host;
      options = {
        method: 'POST',
        body: this.processData(name, data, lang),
        headers: HEADERS,
        timeout: 15000
      };
      return new Promise(function(resolve, reject) {
        var promise;
        promise = request(url, options).then(handles.atop);
        promise.then(resolve, reject)["catch"](reject);
        return promise.then(debug, error);
      });
    };

    Atop.prototype.__atopRequest = function(name, data) {
      if (data == null) {
        data = {};
      }
      return this.timer(this._atopRequest, [name, data], 'm', function(time) {
        return console.log((name + " took ") + time + " ms!");
      });
    };

    Atop.prototype.__timer = function(task, args, format, callback) {
      var t1;
      if (callback) {
        t1 = process.hrtime();
        if (args) {
          args.push(function() {
            var time;
            time = process.hrtime(t1);
            if (format === 'm') {
              return callback(time[0] / 1000 + time[1] / 1000000);
            }
          });
          return task.apply(this, args);
        } else {
          return task(function() {
            var time;
            time = process.hrtime(t1);
            if (format === 'm') {
              return callback(time[0] / 1000 + time[1] / 1000000);
            }
          });
        }
      }
    };

    return Atop;

  })();

  module.exports = Atop;

}).call(this);
